해당 Repo는 알고리즘 문제 해결을 기록하는 Repo입니다.

---

# Category

# 시뮬레이션

가장 쉬운 문제 유형으로 초기 상태와 어떤 작업을 수행할지 제공하고 최종 결과가 어떻게 될지 예측하는 문제
(특정 과정에 거친 결과는 무엇인가?)

- 문제를 코드로 그대로 옮기면 쉽다.
- 무엇을 해야 하는지 문제에 다 나와 있다.

# 전체 탐색 Brute Force Algorightm, 완전 탐색

시뮬레이션과는 다르게 과정을 알려주지 않고 가장 좋은 결과가 무엇인가를 찾는 문제이다.
(선택 사항이 몇 개가 있고 어떤 것을 선택해야할지 모른다면 모든 경우를 테스트 한다.)
가능한 모든 것을 **다 해보는 것**.
자원만 충족한다면 항상 **100%의 정확도**가 보장된다는 점
**완전 탬색이라고 불리는 기법의 종류에는 4가지의 기법이 있다.**

- 재귀 함수
- 비트 마스크
- 순열
- BFS, DFS

## 문제의 형태 2가지

- 모든 패턴을 찾고 가장 좋은 답을 찾는 것
- 모든 패턴을 찾고 조건을 충족하는 패턴이 몇 개가 있는지 찾는 것.

## 팁

- "가장 많은 것을 고르시오" 라는 문장이 있으면 대부분 전체 탐색이다.

## 재귀함수

재귀를 쓰는 방법은 **순서와 선택**에 사용된다.

1. 순서 : 중복 없이
   > 중복이 없다는 것은 그 전 순서를 알아야 하기 때문에

---

### 알고리즘 문제 풀이 스킬

# 문자열 관련 스킬

### 문자열 뒤집기

- StringBuilder, StringBuffer reverse 메서드 사용

# 숫자

- 숫자 각 자릿수 빼기 (나머지와 /연산 사용)
- 정수인지 판별하기
  > 1. 각 자릿수를 돌면서 ASCII 코드의 값 비교
  > 2. parseInt로 검증하는데 만약

# 정렬 기준 변경하기
